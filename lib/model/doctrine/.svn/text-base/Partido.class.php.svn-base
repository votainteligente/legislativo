<?php

/**
 * Partido
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    vota
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7021 2010-01-12 20:39:49Z lsmith $
 */
class Partido extends BasePartido
{
  public function __toString()
  {
    return $this->getSigla();
  }

  public function getMociones()
  {
    $leyes = null;
    $parls = Doctrine_Core::getTable('Parlamentario')->createQuery('x')->where('x.id_partido = ?', $this->getIdPartido())->execute();
    foreach ($parls as $i=>$parl){
      if ($i == 0) $q_str3 = 'a.id_parlamentario = ?';
      else $q_str3 .= ' OR a.id_parlamentario = ?';
      $q_val3[] = $parl->getIdParlamentario();
    }
    $autores = Doctrine_Core::getTable('Autor')->createQuery('a')->where($q_str3, $q_val3)->execute();
    if (count($autores) > 0){
      foreach ($autores as $i=>$autor){
        $test = $autor->getAutorProyectoLey();
        if (count($autor->getAutorProyectoLey()) > 0){
          if ($leyes == null) $leyes = $autor->getAutorProyectoLey();
          else $leyes->merge($autor->getAutorProyectoLey());
        }
      }
    }
    return $leyes;
  }

  public function countMociones($leyes, $y1, $y2){
    //separar por periodos de ingreso
    $limit = '-03-10';
    $f1 = date($y1.$limit);
    $f2 = date($y2.$limit);

    //base query
    $q = Doctrine_Core::getTable('ProyectoLey')->createQuery('p');
    foreach ($leyes as $i => $proyecto) {
      if ($i == 0) $q_str = 'p.id_proyecto_ley = ?';
      else $q_str .= ' OR p.id_proyecto_ley = ?';
      $q_val[] = $proyecto->getIdProyectoLey();
    }
    $q = $q->andWhere($q_str, $q_val)->andWhere('p.fecha_ingreso > ? AND p.fecha_ingreso <= ?', array($f1,$f2));

    return $q;
  }

  public function countMocionesMateria($leyes, $y1, $y2, $super_materias=null){
    $q = $this->countMociones($leyes, $y1, $y2);
    if ($super_materias != null){
      foreach ($super_materias as $i => $super) {
        if ($i == 0) $q_str = 'p.id_materia = ?';
        else $q_str .= ' OR p.id_materia = ?';
        $q_val[] = $super;
      }
      $q = $q->andWhere($q_str, $q_val);
    }
    return Doctrine_Core::getTable('ProyectoLey')->countProyectos($q);
  }

  public function countMocionesEstado($leyes, $y1, $y2, $state_num=0){
    $q = $this->countMociones($leyes, $y1, $y2);
    
    //separar por estados de la ley
    $state = null; $state1 = null; $state2 = null; $state3 = null; $state4 = null; $state5 = null; $state6 = null; $state7 = null; $state8 = null; $state9 = null; $state10 = null; $state11 = null; $state12 = null; $state13 = null; $state14 = null;  $state15 = null; $state16 = null;
    $substate = null; $substate1 = null; $substate2 = null;
    switch($state_num){
      case 1: 
        $state = 'Tramitación terminada';
        $substate = ' ';
        break;
      case 2: 
        $state = 'Tramitación terminada';
        $substate = 'Inconstitucional';
        $substate1 = 'Inadmisible'; 
        $substate2 = 'Rechazado'; 
        break;
      case 3: 
        $state = 'Primer trámite constitucional'; 
        $state1 = 'Segundo trámite constitucional'; 
        $state2 = 'Tercer trámite constitucional'; 
        $state3 = 'Trámite de aprobacion presidencial'; 
        $state4 = 'Discusión veto en Cámara Revisora';
        $state5 = 'Comisión Mixta por rechazo de modificaciones';
        $state6 = 'Trámite en Tribunal Constitucional';
        $state7 = 'Trámite finalización en Cámara de Origen';
        $state8 = 'Comisión Mixta por rechazo de idea de legislar';
        $state9 = 'Disc. informe C.Mixta por rechazo de modif. C. Revisora';
        $state10 = 'Disc. informe C.Mixta por rechazo idea de legislar C. Origen';
        $state11 = 'Disc. Informe C.Mixta por rechazo idea de legislar C. Revis.';
        $state12 = 'Discusión veto en Cámara de Origen';
        $state13 = 'En espera de insistencia';
        $state14 = 'Insistencia';
        break;
      case 4: 
        $state = 'Tramitación terminada';
        $substate = 'Retirado'; 
        break;
      case 5: 
        $state = 'Archivado';
        $state1= 'Solicitud de archivo';
        break;
      case 0:
      default:
    }

    if ($state16 != null) {
      $q = $q->andWhere('p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ? OR p.etapa = ?', array($state,$state1,$state2,$state3,$state4,$state5,$state6,$state7,$state8,$state9,$state10,$state11,$state12,$state13,$state14));
    }
    else if ($state1 != null) {
      $q = $q->andWhere('p.etapa = ? OR p.etapa = ?', array($state,$state1));
    }
    else if ($state != null) {
      $q = $q->andWhere('p.etapa = ?', $state);
      //sub-etapas
      if ($substate2 != null) {
        $q = $q->andWhere('p.sub_etapa = ? OR p.sub_etapa = ? OR p.sub_etapa = ?', array($substate,$substate1,$substate2));
      }
      else if ($substate != null) {
        $q = $q->andWhere('p.sub_etapa = ?', $substate);
      }
    }

    return Doctrine_Core::getTable('ProyectoLey')->countProyectos($q);   
  }
}

